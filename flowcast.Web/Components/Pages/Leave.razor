@page "/workflow/execute/{WorkflowId:int}"
@using System.ComponentModel.DataAnnotations
@using flowcast.ApiService.DTO.Workflow
@using flowcast.Web
@using static flowcast.Web.HttpApiClient
@inject HttpApiClient ApiClient
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">
                        <i class="fas fa-play-circle"></i>
                        Exécuter Workflow #@WorkflowId
                    </h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(loadError))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle"></i>
                            @loadError
                        </div>
                    }

                    <EditForm Model="parameters" OnValidSubmit="ExecuteWorkflowAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="startDate" class="form-label">
                                        <i class="fas fa-calendar-alt"></i>
                                        Date de début
                                    </label>
                                    <InputDate @bind-Value="parameters.StartDate"
                                               class="form-control"
                                               id="startDate" />
                                    <ValidationMessage For="() => parameters.StartDate" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label for="endDate" class="form-label">
                                        <i class="fas fa-calendar-alt"></i>
                                        Date de fin
                                    </label>
                                    <InputDate @bind-Value="parameters.EndDate"
                                               class="form-control"
                                               id="endDate" />
                                    <ValidationMessage For="() => parameters.EndDate" />
                                </div>
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label for="availableDays" class="form-label">
                                <i class="fas fa-clock"></i>
                                Jours disponibles
                            </label>
                            <InputNumber @bind-Value="parameters.availableDays"
                                         class="form-control"
                                         id="availableDays"
                                         min="0" />
                            <ValidationMessage For="() => parameters.availableDays" />
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit"
                                    class="btn btn-primary"
                                    disabled="@isExecuting">
                                @if (isExecuting)
                                {
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Exécution en cours...</span>
                                }
                                else
                                {
                                    <i class="fas fa-play"></i>
                                    <span>Exécuter le workflow</span>
                                }
                            </button>

                            @if (executionResult != null)
                            {
                                <button type="button"
                                        class="btn btn-secondary"
                                        @onclick="ResetExecution">
                                    <i class="fas fa-redo"></i>
                                    Nouvelle exécution
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    @if (executionResult != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">
                            @if (executionResult.Success)
                            {
                                <i class="fas fa-check-circle text-success"></i>
                                <span class="text-success">Workflow exécuté avec succès</span>
                            }
                            else
                            {
                                <i class="fas fa-times-circle text-danger"></i>
                                <span class="text-danger">Échec de l'exécution du workflow</span>
                            }
                        </h4>
                    </div>
                    <div class="card-body">
                        @if (!executionResult.Success && executionResult.StepResults?.Any() == true)
                        {
                            @* Affichage personnalisé pour les échecs *@
                            var failedStep = executionResult.StepResults.FirstOrDefault(s => !s.Success);
                            if (failedStep != null)
                            {
                                <div class="alert alert-danger" role="alert">
                                    <h6 class="alert-heading mb-2">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Demande refusée
                                    </h6>
                                    <p class="mb-1">
                                        <strong>Étape échouée :</strong> @failedStep.StepName
                                    </p>
                                    @if (!string.IsNullOrEmpty(failedStep.Message))
                                    {
                                        <p class="mb-0">
                                            <strong>Raison :</strong> @GetUserFriendlyMessage(failedStep.Message)
                                        </p>
                                    }
                                </div>
                            }
                        }
                        else if (!string.IsNullOrEmpty(executionResult.Message))
                        {
                            <div class="alert @(executionResult.Success ? "alert-success" : "alert-danger")" role="alert">
                                @(executionResult.Success? executionResult.Message: GetUserFriendlyMessage(executionResult.Message))
                            </div>
                        }

                        @* Affichage de l'exécution progressive *@
                        @if (showProgressiveExecution && currentSteps.Any())
                        {
                            <h5 class="mb-3">
                                <i class="fas fa-cogs"></i>
                                Exécution du workflow en cours...
                            </h5>

                            <div class="timeline">
                                @for (int i = 0; i < currentSteps.Count; i++)
                                {
                                    var step = currentSteps[i];
                                    var isCurrentStep = i == currentStepIndex;
                                    var isCompleted = i < currentStepIndex;
                                    var isPending = i > currentStepIndex;

                                    <div class="timeline-item @(isCompleted ? (step.Success ? "success" : "error") : isCurrentStep ? "executing" : "pending")">
                                        <div class="timeline-marker">
                                            @if (isCurrentStep)
                                            {
                                                <i class="fas fa-spinner fa-spin"></i>
                                            }
                                            else if (isCompleted)
                                            {
                                                @if (step.Success)
                                                {
                                                    <i class="fas fa-check"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times"></i>
                                                }
                                            }
                                            else
                                            {
                                                <i class="fas fa-clock"></i>
                                            }
                                        </div>
                                        <div class="timeline-content">
                                            <div class="timeline-header">
                                                <h6 class="mb-1">@step.StepName</h6>
                                                <small class="text-muted">Règle: @step.RuleKey</small>
                                            </div>
                                            <div class="timeline-body">
                                                @if (isCurrentStep)
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="fas fa-spinner fa-spin"></i>
                                                        En cours...
                                                    </span>
                                                }
                                                else if (isCompleted)
                                                {
                                                    <span class="badge @(step.Success ? "bg-success" : "bg-danger")">
                                                        @(step.Success ? "Validé" : "Refusé")
                                                    </span>
                                                    @if (!string.IsNullOrEmpty(step.Message))
                                                    {
                                                        <p class="mt-2 mb-0">@GetUserFriendlyMessage(step.Message)</p>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">En attente</span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        @* Affichage des détails des étapes - résultat final *@
                        @if (!showProgressiveExecution && executionResult?.StepResults != null && executionResult.StepResults.Any())
                        {
                            <h5 class="mb-3">
                                <i class="fas fa-list"></i>
                                Détail des étapes
                            </h5>

                            <div class="timeline">
                                @foreach (var step in executionResult.StepResults)
                                {
                                    <div class="timeline-item @(step.Success ? "success" : "error")">
                                        <div class="timeline-marker">
                                            @if (step.Success)
                                            {
                                                <i class="fas fa-check"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-times"></i>
                                            }
                                        </div>
                                        <div class="timeline-content">
                                            <div class="timeline-header">
                                                <h6 class="mb-1">@step.StepName</h6>
                                                <small class="text-muted">Règle: @step.RuleKey</small>
                                            </div>
                                            <div class="timeline-body">
                                                <span class="badge @(step.Success ? "bg-success" : "bg-danger")">
                                                    @(step.Success ? "Validé" : "Refusé")
                                                </span>
                                                @if (!string.IsNullOrEmpty(step.Message))
                                                {
                                                    <p class="mt-2 mb-0">@GetUserFriendlyMessage(step.Message)</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .timeline {
        position: relative;
        padding-left: 3rem;
    }

        .timeline::before {
            content: '';
            position: absolute;
            left: 1rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }

    .timeline-item {
        position: relative;
        margin-bottom: 2rem;
    }

    .timeline-marker {
        position: absolute;
        left: -2.5rem;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
        font-weight: bold;
        color: white;
        z-index: 1;
    }

    .timeline-item.success .timeline-marker {
        background-color: #28a745;
    }

    .timeline-item.error .timeline-marker {
        background-color: #dc3545;
    }

    .timeline-item.executing .timeline-marker {
        background-color: #ffc107;
    }

    .timeline-item.pending .timeline-marker {
        background-color: #6c757d;
    }

    .timeline-content {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .timeline-item.success .timeline-content {
        border-left: 4px solid #28a745;
    }

    .timeline-item.error .timeline-content {
        border-left: 4px solid #dc3545;
    }

    .timeline-item.executing .timeline-content {
        border-left: 4px solid #ffc107;
        background-color: #fff9e6;
    }

    .timeline-item.pending .timeline-content {
        border-left: 4px solid #6c757d;
        background-color: #f8f9fa;
        opacity: 0.7;
    }

    .timeline-header h6 {
        color: #495057;
        font-weight: 600;
    }

    .timeline-body {
        margin-top: 0.5rem;
    }

    .form-label {
        font-weight: 500;
        color: #495057;
    }

        .form-label i {
            margin-right: 0.5rem;
            color: #6c757d;
        }

    .card-header h3, .card-header h4 {
        color: #495057;
    }

    .card-header i {
        margin-right: 0.5rem;
    }

    .btn i {
        margin-right: 0.5rem;
    }

    .alert i {
        margin-right: 0.5rem;
    }
</style>

@code {
    [Parameter] public int WorkflowId { get; set; }

    private string? loadError;
    private bool isExecuting = false;
    private WorkflowExecutionParameters parameters = new WorkflowExecutionParameters();
    private WorkflowResult? executionResult;
    private List<HttpApiClient.StepResult> currentSteps = new();
    private int currentStepIndex = -1;
    private bool showProgressiveExecution = false;

    protected override async Task OnInitializedAsync()
    {
        parameters.StartDate = DateTime.Today;
        parameters.EndDate = DateTime.Today.AddDays(1);
        parameters.availableDays = 25;
    }

    private async Task ExecuteWorkflowAsync()
    {
        executionResult = null;
        loadError = null;
        isExecuting = true;
        showProgressiveExecution = true;
        currentSteps.Clear();
        currentStepIndex = -1;

        try
        {
            // Validation côté client
            if (parameters.EndDate < parameters.StartDate)
            {
                loadError = "La date de fin doit être postérieure ou égale à la date de début.";
                return;
            }

            var dict = new Dictionary<string, string>
            {
                ["startDate"] = parameters.StartDate.ToString("yyyy-MM-dd"),
                ["endDate"] = parameters.EndDate.ToString("yyyy-MM-dd"),
                ["availableDays"] = parameters.availableDays.ToString()
            };

            // Exécuter le workflow réel
            var result = await ApiClient.ExecuteWorkflowAsync(WorkflowId, dict);

            // Si on a des étapes, les simuler une par une
            if (result.StepResults?.Any() == true)
            {
                // Initialiser toutes les étapes - conversion explicite
                currentSteps = new List<HttpApiClient.StepResult>(result.StepResults);
                StateHasChanged();

                // Simuler l'exécution progressive
                await SimulateProgressiveExecution(result.StepResults);
            }

            executionResult = result;
        }
        catch (Exception ex)
        {
            loadError = $"Erreur lors de l'exécution : {ex.Message}";
        }
        finally
        {
            isExecuting = false;
            showProgressiveExecution = false;
        }
    }

    private async Task SimulateProgressiveExecution(List<HttpApiClient.StepResult> steps)
    {
        for (int i = 0; i < steps.Count; i++)
        {
            currentStepIndex = i;
            StateHasChanged();

            // Attendre 3 secondes pour simuler l'exécution
            await Task.Delay(3000);

            // Si l'étape échoue, on s'arrête ici
            if (!steps[i].Success)
            {
                break;
            }
        }

        // Marquer comme terminé
        currentStepIndex = steps.Count;
        StateHasChanged();

        // Petite pause avant d'afficher le résultat final
        await Task.Delay(1000);
    }

    private void ResetExecution()
    {
        executionResult = null;
        loadError = null;
        showProgressiveExecution = false;
        currentSteps.Clear();
        currentStepIndex = -1;
    }

    private string GetUserFriendlyMessage(string technicalMessage)
    {
        // Nettoyer les messages techniques pour les rendre plus user-friendly
        if (string.IsNullOrEmpty(technicalMessage))
            return "";

        // Supprimer les préfixes techniques comme [LeaveValidator], [LeaveMaxDurationValidator], etc.
        var cleanMessage = System.Text.RegularExpressions.Regex.Replace(
            technicalMessage,
            @"^\[[\w\s]+\]\s*",
            "",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );

        // Remplacer certains termes techniques par des termes plus conviviaux
        cleanMessage = cleanMessage
            .Replace("Demande valide :", "✓ Demande validée :")
            .Replace("La demande dépasse", "❌ Votre demande dépasse")
            .Replace("limite autorisée", "limite maximale autorisée")
            .Replace("jours demandés", "jours demandés")
            .Replace("solde suffisant", "vous avez suffisamment de jours disponibles");

        return cleanMessage;
    }

    private class WorkflowExecutionParameters
    {
        [Required(ErrorMessage = "La date de début est requise")]
        public DateTime StartDate { get; set; }

        [Required(ErrorMessage = "La date de fin est requise")]
        public DateTime EndDate { get; set; }

        [Required(ErrorMessage = "Le nombre de jours disponibles est requis")]
        [Range(0, int.MaxValue, ErrorMessage = "Le nombre de jours doit être positif")]
        public int availableDays { get; set; }
    }
}